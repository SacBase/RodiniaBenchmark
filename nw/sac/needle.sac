use StdIO: all;
use Array: all;
use Rand: all except{srandom};
use Random: {srandom};
use Benchmarking: all;

#define LIMIT -999

#ifndef SIZE
#define SIZE 4096
#endif

#define ROWS       SIZE
#define COLS       SIZE
#define PENALTY    10

inline int maximum( int a, int b, int c)
{
  k = 0;
  if( a <= b) {
    k = b;
  } 
  else { 
    k = a;
  }

  if( k <=c) {
    k = c;
  }

  return( k);
}

int id( int x)
{
  return( x);
}

int runTest( ) 
{
  max_rows = ROWS;
  max_cols = COLS;
  penalty = PENALTY;

  max_rows = max_rows + 1;
  max_cols = max_cols + 1;

  /* blosum62[24][24] */
  blosum62 = [
    [ 4, -1, -2, -2,  0, -1, -1,  0, -2, -1, -1, -1, -1, -2, -1,  1,  0, -3, -2,  0, -2, -1,  0, -4],
    [-1,  5,  0, -2, -3,  1,  0, -2,  0, -3, -2,  2, -1, -3, -2, -1, -1, -3, -2, -3, -1,  0, -1, -4],
    [-2,  0,  6,  1, -3,  0,  0,  0,  1, -3, -3,  0, -2, -3, -2,  1,  0, -4, -2, -3,  3,  0, -1, -4],
    [-2, -2,  1,  6, -3,  0,  2, -1, -1, -3, -4, -1, -3, -3, -1,  0, -1, -4, -3, -3,  4,  1, -1, -4],
    [ 0, -3, -3, -3,  9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1, -3, -3, -2, -4],
    [-1,  1,  0,  0, -3,  5,  2, -2,  0, -3, -2,  1,  0, -3, -1,  0, -1, -2, -1, -2,  0,  3, -1, -4],
    [-1,  0,  0,  2, -4,  2,  5, -2,  0, -3, -3,  1, -2, -3, -1,  0, -1, -3, -2, -2,  1,  4, -1, -4],
    [ 0, -2,  0, -1, -3, -2, -2,  6, -2, -4, -4, -2, -3, -3, -2,  0, -2, -2, -3, -3, -1, -2, -1, -4],
    [-2,  0,  1, -1, -3,  0,  0, -2,  8, -3, -3, -1, -2, -1, -2, -1, -2, -2,  2, -3,  0,  0, -1, -4],
    [-1, -3, -3, -3, -1, -3, -3, -4, -3,  4,  2, -3,  1,  0, -3, -2, -1, -3, -1,  3, -3, -3, -1, -4],
    [-1, -2, -3, -4, -1, -2, -3, -4, -3,  2,  4, -2,  2,  0, -3, -2, -1, -2, -1,  1, -4, -3, -1, -4],
    [-1,  2,  0, -1, -3,  1,  1, -2, -1, -3, -2,  5, -1, -3, -1,  0, -1, -3, -2, -2,  0,  1, -1, -4],
    [-1, -1, -2, -3, -1,  0, -2, -3, -2,  1,  2, -1,  5,  0, -2, -1, -1, -1, -1,  1, -3, -1, -1, -4],
    [-2, -3, -3, -3, -2, -3, -3, -3, -1,  0,  0, -3,  0,  6, -4, -2, -2,  1,  3, -1, -3, -3, -1, -4],
    [-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4,  7, -1, -1, -4, -3, -2, -2, -1, -2, -4],
    [ 1, -1,  1,  0, -1,  0,  0,  0, -1, -2, -2,  0, -1, -2, -1,  4,  1, -3, -2, -2,  0,  0,  0, -4],
    [ 0, -1,  0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1,  1,  5, -2, -2,  0, -1, -1,  0, -4],
    [-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1,  1, -4, -3, -2, 11,  2, -3, -4, -3, -2, -4],
    [-2, -2, -2, -3, -2, -1, -2, -3,  2, -1, -1, -2, -1,  3, -3, -2, -2,  2,  7, -1, -3, -2, -1, -4],
    [ 0, -3, -3, -3, -1, -2, -2, -3, -3,  3,  1, -2,  1, -1, -2, -2,  0, -3, -1,  4, -3, -2, -1, -4],
    [-2, -1,  3,  4, -3,  0,  1, -1,  0, -3, -4,  0, -3, -3, -2,  0, -1, -4, -3, -3,  4,  1, -1, -4],
    [-1,  0,  0,  1, -3,  3,  4, -2,  0, -3, -3,  1, -1, -3, -1,  0, -1, -3, -2, -2,  1,  4, -1, -4],
    [ 0, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -2,  0,  0, -2, -1, -1, -1, -1, -1, -4],
    [-4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4,  1]
  ];
	
  srandom( 7);  
/*
  input_itemsets = genarray( [max_rows, max_cols], 0); 
  for( i=1; i< max_rows ; i++) {     
    input_itemsets[i, 0] = random(0, 2147483647) % 10 + 1;
  }
 
  for( j=1; j< max_cols ; j++) {    
    input_itemsets[0, j] = random(0, 2147483647 )% 10 + 1;
  }
*/
  input_itemsets = with {
                     ( [1, 0] <= iv < [ max_rows, 1]) {
                       /* res = random(0, 2147483647 )% 10 + 1; */
                       res = rand()% 10 + 1; 
                     }:res;
                     ( [0, 1] <= iv < [ 1, max_cols]) {
                       /* res = random(0, 2147483647 )% 10 + 1; */
                       res = rand()% 10 + 1; 
                     }:res;
                   }:genarray([max_rows, max_cols], 0);

  reference = with {
                ([1,1] <= iv=[i,j] < [max_rows,max_cols]) {
                  res = id( blosum62[input_itemsets[i, 0]][input_itemsets[0, j]]);
                }:res;
              }:genarray([max_rows, max_cols], 0); 

/*
  for( i = 1; i< max_rows ; i++) {
    input_itemsets[i, 0] = -i * penalty;
  }

  for( j = 1; j< max_cols ; j++) {
     input_itemsets[0, j] = -j * penalty;
  }
*/

  input_itemsets = with {
                     ( [1, 0] <= iv=[i,j] < [ max_rows, 1]) {
                       res = id(-i) * penalty;
                     }:res;
                     ( [0, 1] <= iv=[i,j] < [ 1, max_cols]) {
                       res = id(-j) * penalty; 
                     }:res;
                   }:genarray([max_rows, max_cols], 0);


  interval0 = getInterval( "NW", 0 );
  start( interval0 ); 

  for( i = 1; i < max_cols; i++) {
    input_itemsets = with {
                       ( [1,1] <= iv=[r,c] < [1+i,1+i]) {
                         if( r == (i - c + 1)) {
                           res = maximum( input_itemsets[r-1, c-1]+ reference[r, c], 
                                          input_itemsets[r, c-1] - penalty, 
			                  input_itemsets[r-1, c] - penalty);
                         }
                         else {
                           res = input_itemsets[r,c];
                         }
                       }:res;
                     }:modarray( input_itemsets);
  }

/*
  printf("Finished first loop!\n");
*/

  for( i = 1; i < max_cols-1; i++) {
    input_itemsets = with {
                       ( [1+i,1+i] <= iv=[r,c] < [max_rows,max_cols]) {
                         if( r == (max_cols - c + i)) { 
                           res = maximum( input_itemsets[r-1, c-1]+ reference[r, c], 
                                          input_itemsets[r, c-1] - penalty, 
			                  input_itemsets[r-1, c] - penalty);
                         }
                         else {
                           res = input_itemsets[r,c];
                         }
                       }:res;
                     }:modarray( input_itemsets);
  }

  end( interval0 ); 

/*
  for( i = 1; i < max_cols-1; i++) {
    input_itemsets = with {
                       ( [1+i,1+i] <= iv=[r,c] < [max_rows,max_cols]) {
                         if( r > max_cols -10 || c < max_rows +20 || c+r < 123 ) { 
                           res = maximum( input_itemsets[r-1, c-1]+ reference[r, c], 
                                          input_itemsets[r, c-1] - penalty, 
			                  input_itemsets[r-1, c] - penalty);
                         }
                         else {
                           res = input_itemsets[r,c];
                         }
                       }:res;
                     }:modarray( input_itemsets);
  }
*/
#ifdef OUTPUT 
/*
  print(input_itemsets);
*/

  for( i = 0; i < max_rows; i++) {
    for( j = 0; j < max_cols; j++) {
      printf("%d ", input_itemsets[i,j]);
    }
    printf("\n");
  }

  return( 0);
#else
  /* printf("%d\n", input_itemsets[0,0]); */
  return( input_itemsets[0,0]);
#endif

}

int main( ) 
{
  res = runTest( );

  return( res);
}



