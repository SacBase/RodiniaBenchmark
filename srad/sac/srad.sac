use StdIO: all;
use Array: all;
use Math:  all;
use Random: all;

#ifdef DOUBLE
#define DBL double
#define TOD tod
#else 
#define DBL float
#define TOD tof
#endif

#define LAMBDA 0.5
#define ITER   1000

#ifndef SIZE
#define SIZE 2048
#endif

#define ROWS SIZE
#define COLS SIZE

#define R1     0
#define R2     127
#define C1     0
#define C2     127

DBL[ROWS, COLS] random_matrix()
{
  srandom(7);
/*
  I = with {
        ([0, 0] <= iv < [ROWS, COLS]):TOD(random(0, 2147483647))/TOD(2147483647);
      }:genarray([ROWS, COLS], TOD(0.0)); 
  
  J = with {
        ( [0, 0] <= iv < [ROWS, COLS]):exp(I[iv]);
      }:genarray([ROWS, COLS], TOD(0.0));
*/
  I = genarray([ROWS, COLS], TOD(0.0));
  J = genarray([ROWS, COLS], TOD(0.0));

  for( i = 0 ; i < ROWS ; i++){
    for ( j = 0 ; j < COLS ; j++){
      I[i, j] = TOD(random(0, 2147483647))/TOD(2147483647);
    }
  }

  for( i = 0 ; i < ROWS ; i++){
    for ( j = 0 ; j < COLS ; j++){
      J[i, j] = exp(I[i,j]); 
    }
  }

  return( J); 
}

int main()
{   
  size_R = (R2-R1+1)*(C2-C1+1);   

  /* Input Matrix */
  J = random_matrix();

  for( iter=0; iter< ITER; iter++) {

#ifdef FOLD
    sum1, sum2 =
      with {
        ( [R1,C1] <= iv=[i,j] <= [R2,C2]) {
          res1 = J[i,j];
          res2 = res1*res1;
        }:(res1, res2);
      }:( fold(+, TOD(0.0)), 
          fold(+, TOD(0.0)));
#else
    sum1=TOD(0.0); 
    sum2=TOD(0.0);

    for (i=R1; i<=R2; i++) {
      for (j=C1; j<=C2; j++) {
        tmp   = J[i, j];
        sum1  = sum1 + tmp ;
        sum2  = sum2 + tmp*tmp;
      }
    }
#endif

    meanROI = sum1 / TOD(size_R);
    varROI  = (sum2 / TOD(size_R)) - meanROI*meanROI;
    q0sqr   = varROI / (meanROI*meanROI);

    dN = with {
           ( [0, 0] <= iv=[i,j] < [ROWS, COLS]) {
             if( i == 0) {
               ne = J[i,j];
             }
             else {
               ne = J[i-1,j];
             }
             res = ne - J[i,j];
           }:res;
         }:genarray([ROWS, COLS], TOD(0.0));

    dS = with {
           ( [0, 0] <= iv=[i,j] < [ROWS, COLS]) {
             if( i == ROWS-1) {
               se = J[i,j];
             }
             else {
               se = J[i+1,j];
             }
             res = se - J[i,j];
           }:res;
         }:genarray([ROWS, COLS], TOD(0.0));

    dW = with {
           ( [0, 0] <= iv=[i,j] < [ROWS, COLS]) {
             if( j == 0) {
               we = J[i,j];
             }
             else {
               we = J[i,j-1];
             }
             res = we - J[i,j];
           }:res;
         }:genarray([ROWS, COLS], TOD(0.0));

    dE = with {
           ( [0, 0] <= iv=[i,j] < [ROWS, COLS]) {
             if( j == COLS-1) {
               ee = J[i,j];
             }
             else {
               ee = J[i,j+1];
             }
             res = ee - J[i,j];
           }:res;
         }:genarray([ROWS, COLS], TOD(0.0));

    c = with { 
          ( [0, 0] <= iv=[i,j] < [ROWS, COLS]) {
            Jc = J[iv];
            G2 = (dN[iv]*dN[iv] + dS[iv]*dS[iv] + dW[iv]*dW[iv] + dE[iv]*dE[iv]) / (Jc*Jc);
            L = (dN[iv] + dS[iv] + dW[iv] + dE[iv]) / Jc;

	    num  = (TOD(0.5)*G2) - ((TOD(1.0)/TOD(16.0))*(L*L)) ;
            den  = TOD(1.0) + (TOD(0.25)*L);
            qsqr = num/(den*den);
            den = (qsqr-q0sqr) / (q0sqr * (TOD(1.0)+q0sqr)) ;
            res = TOD(1.0) / (TOD(1.0)+den) ;
              
            if( res < TOD(0.0)) {
              res = TOD(0.0);
            }
            else if( res > TOD(1.0)) {
              res = TOD(1.0);
            }
          }:res;
        }:genarray([ROWS, COLS], TOD(0.0));

    J = with { 
          ( [0, 0] <= iv=[i,j] < [ROWS, COLS]) {
            cN = c[iv];
            cW = c[iv];
            if( i == ROWS-1) {
              cS = c[i,j];
            }
            else {
              cS = c[i+1,j];
            }
            if( j == COLS-1) {
              cE = c[i,j];
            }
            else {
              cE = c[i,j+1];
            }
            D = cN * dN[iv] + cS * dS[iv] + cW * dW[iv] + cE * dE[iv];
                
            res = J[iv] + TOD(0.25)*TOD(LAMBDA)*D;
          }:res;
        }:modarray(J);      
  }

#ifdef OUTPUT
  for( i = 0 ; i < ROWS; i++){
    for ( j = 0 ; j < COLS; j++){
       printf("%.5f\n", J[i, j]); 
    }	
  }
#else
  print( J[0,0]);
#endif

  return( 0);
}


