use StdIO: all;
use Array: all;

#define NO_OF_NODES 4096
#define NO_OF_EDGES 24576


int main()
{
  int[NO_OF_NODES] graph_nodes_starting;
  int[NO_OF_NODES] graph_nodes_edges; 
  int[NO_OF_EDGES] graph_edges;

  graph_nodes_starting = FibreScanIntArray();
  graph_nodes_edges = FibreScanIntArray(); 
  graph_edges = FibreScanIntArray();
 
  graph_mask = genarray( [NO_OF_NODES], 0);  
  updating_graph_mask = genarray( [NO_OF_NODES], 0);  
  graph_visited = genarray( [NO_OF_NODES], 0);  
  cost = genarray( [NO_OF_NODES], -1);  
  parent_lookup = genarray( [NO_OF_NODES], -1);  
 
  root = 0;
  /* Initialize parent_lookup array */

  parent_lookup[root] = 0; 
  for( i = 0; i < NO_OF_NODES; i++) {
    for( j = graph_nodes_starting[i]; j < (graph_nodes_starting[i] + graph_nodes_edges[i]); j++) {
      printf("son=%d   parent=%d\n", graph_edges[j], i);
      parent_lookup[graph_edges[j]] = i; 
    }
  }

  for( i = 0; i < NO_OF_NODES; i++) {
/*
    if( parent_lookup[i] == 0) {
      printf( "find node %d whose parent is 0!\n", i);
    }
*/
    printf("node=%d parent=%d\n", i, parent_lookup[i]);
  }

  /**********************************/
  
  graph_mask[root] = 1;
  graph_visited[root] = 1;
  cost[root] = 0;

  printf("Start traversing the tree\n"); 

  k = 0;
  stop = 0;

  do {
    stop = 0;

    updating_graph_mask, cost =
      with {
        ([0] <= iv=[i] < [NO_OF_NODES]) {
          res1 = updating_graph_mask[i];
          res2 = cost[i];
          if( graph_mask[parent_lookup[i]] == 1 &&
              graph_visited[i] == 0) {
            printf("hahahahaha\n");
	    res1 = 1;
	    res2 = cost[parent_lookup[i]] + 1;
          }
        }:(res1, res2);
      }:(modarray(updating_graph_mask), modarray(cost));

    for( tid = 0; tid < NO_OF_NODES; tid++ ) {
      graph_mask[tid] = 0;
      if ( updating_graph_mask[tid] == 1) {
        graph_mask[tid]=1;
        graph_visited[tid]=1;
        stop=1;
        updating_graph_mask[tid]=0;
      }
    }
    k++;
  } while( stop==1);

  printf("Total number of iterations %d\n", k);

  for( i = 0; i < NO_OF_NODES; i++) {
    printf("%d) cost:%d\n",i,cost[i]);
  }

  return( 0); 
}

