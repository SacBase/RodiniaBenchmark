use StdIO: all;
use Array: all;
use Math:  all;
use Rand: all except{srandom};
use Random: {srandom};
use Benchmarking: all;

/* Macros
 *   SEQ: Make sure the kernel uses the version of features 
 *        array that enbles memory coalescing.
 */   

#ifdef FLOAT
#define DBL float
#define TOD tof
#else 
#define DBL double
#define TOD tod
#endif


#define FLT_MAX (TOD(3.40282347e+38))

/*
#define FLT_MAX TOD(10000000000000.0)
*/

#define NFEATURES 34
#define NCLUSTERS 5
#define THRESHOLD TOD(0.001)

#ifndef SIZE
#define SIZE 1048576
#endif

#ifndef ITER
#define ITER 500
#endif

inline DBL[2] minIndex(DBL[2] a, DBL[2] b)
{
  if( a[1] > b[1]) {
    res = b;
  }
  else {
    res = a;
  }
  return( res);
}

DBL id( DBL x)
{
  return( x);
}

int main()
{
#if 0
  DBL[NFEATURES, SIZE] features_gpu;

#ifdef FLOAT
  features_gpu = FibreScanFloatArray();
#else
  features_gpu = FibreScanDoubleArray();
#endif

  /* Transpose features_gpu so that access to the
   * array on host can be more efficient */
  features_cpu = genarray( [SIZE, NFEATURES], TOD(0.0));
  for( i = 0; i < SIZE; i++) {
    for( j = 0; j < NFEATURES; j++) {
      features_cpu[i,j] = features_gpu[j,i];
    }
  }
#endif


  srandom( toui(7));

  features_cpu = with {
                   /* (. <= iv=[i,j] <= .) : id(TOD( rand()%100)/TOD(100.0)); */
                   (. <= iv=[i,j] <= .) : id(TOD( rand()%100)); 
                 }:genarray([SIZE,NFEATURES]);

  features_gpu = with {
                   (. <= iv=[i,j] <= .) : id(features_cpu[j,i]);
                 }:genarray([NFEATURES, SIZE]);

#if 0
  /* Here we need to randomly choose NCLUSTERS cluster centers */
  n = 0;
  clusters = genarray([NCLUSTERS, NFEATURES], TOD(0.0));
  /* initialize the random clusters */
  initial = genarray([SIZE], 0);
  for (i = 0; i < SIZE; i++) {
    initial[i] = i;
  }
  initial_points = SIZE;

  /* randomly pick cluster centers */
  for (i=0; i < NCLUSTERS && initial_points >= 0; i++) {
    for (j=0; j < NFEATURES; j++) {
      clusters[i, j] = features_gpu[j,initial[n]];	
    }

    /* swap the selected index to the end (not really necessary,
       could just move the end up) */
    temp = initial[n];
    initial[n] = initial[initial_points-1];
    initial[initial_points-1] = temp;
    initial_points = initial_points-1;
    n = n + 1;
  }
#endif

  srandom( toui(2012));

  clusters = genarray([NCLUSTERS, NFEATURES], TOD(0.0));
  /* randomly pick cluster centers */
  for (i=0; i<NCLUSTERS; i++) {
    n = rand() % SIZE;
    for (j=0; j<NFEATURES; j++) {
      clusters[i,j] = features_cpu[n, j];
    }
  }

/*
  print(clusters);
*/

  /* Store how many members are there in each cluster */
  new_centers_len = genarray([NCLUSTERS], 0);
  /* The actual centers */
  new_centers = genarray([NCLUSTERS, NFEATURES], TOD(0.0));

  /* Stores which cluster each point belongs to */
  membership = genarray([SIZE], -1);
  membership_new = genarray([SIZE], -1);

  interval0 = getInterval( "KMEANS", 0 );
  start( interval0 );

  c = 0;
  loop = -1;
  do {
    /* Compute new membership */
    membership_new = with {
                   ( [0] <= iv=[k] < [SIZE]) {
                      index_pair = with {
                                ( [0] <= iv=[cl] < [NCLUSTERS]) {
                                  ans = with {
                                    ( [0] <= iv=[j] < [NFEATURES]) {
                                    #ifdef SEQ
                                      diff = features_cpu[k,j]-clusters[cl,j];
                                    #else
                                      diff = features_gpu[j,k]-clusters[cl,j];
                                    #endif
                                      res = diff*diff;
                                    }:res;
                                  }:fold(+, TOD(0.0));
                                  res = [TOD(cl),ans];	
                                }:res;
                              }:fold( minIndex, [TOD(0.0), FLT_MAX]);
                      res = toi(index_pair[0]);
                   }:res;
                 }:modarray( membership_new);

    /* print(membership_new); */

#ifdef PFD
    delta = with {
                   ( [0] <= iv=[k] < [SIZE]) {
                     res = TOD(abs(membership_new[k] - membership[k]));
                   }:res;
                 }:fold(+, TOD(0.0));


    for (i = 0; i < SIZE; i++) {		
      cluster_id = membership_new[i];
      new_centers_len[cluster_id] = new_centers_len[cluster_id]+1;
      for (j = 0; j < NFEATURES; j++) {			
        new_centers[cluster_id, j] = new_centers[cluster_id, j] + features_cpu[i, j];
      }
    }

    membership = membership_new;
#else
    /* Delta reduction and accumulate new centers */
    delta = TOD(0.0);
    for (i = 0; i < SIZE; i++) {		
      cluster_id = membership_new[i];
      new_centers_len[cluster_id] = new_centers_len[cluster_id]+1;
      if( membership_new[i] != membership[i]) {
        delta += TOD(1.0);
        membership[i] = membership_new[i];
      }

      for (j = 0; j < NFEATURES; j++) {			
        new_centers[cluster_id, j] = new_centers[cluster_id, j] + features_cpu[i, j];
      }
    }
#endif

    /* Compute new centers */
    for (i=0; i < NCLUSTERS; i++) {
      for (j=0; j < NFEATURES; j++) {
        if( new_centers_len[i] > 0) {
	  clusters[i, j] = new_centers[i, j] / TOD( new_centers_len[i]);  /* take average i.e. sum/n */
        }
	new_centers[i, j] = TOD(0.0);  /* set back to 0 */
      }
      new_centers_len[i] = 0;  /* set back to 0 */
    }

    c = c + 1;  /* Count the number of actual loops */
    loop = loop + 1;
  } while ( ( delta > THRESHOLD) && ( loop < ITER));

  end( interval0 );

#ifdef OUTPUT
  printf("iterated %d times\n", c);
  /*  print(clusters); */

  for( i = 0; i < NCLUSTERS; i++) {
    for( j = 0; j < NFEATURES; j++) {
      printf("%f ", clusters[i,j]);
    }
    printf("\n");
  }
  return( 0);
#else
  return(toi(clusters[0,0]));
#endif
}

