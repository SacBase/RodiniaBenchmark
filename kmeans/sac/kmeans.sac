use StdIO: all;
use Array: all;
/*
use Ransom: all;
*/

#ifdef FLOAT
#define DBL float
#define TOD tof
#else 
#define DBL double
#define TOD tod
#endif

#define RANDOM_MAX 2147483647

/*
#define FLT_MAX 3.40282347e+38
*/

#define FLT_MAX TOD(10000000000000.0)

#define NPOINTS   100
#define NFEATURES 34
#define NCLUSTERS 5
#define THRESHOLD TOD(0.001)

#define MAX_ITER 500


inline DBL[2] minIndex(DBL[2] a, DBL[2] b)
{
  if( a[1] > b[1]) {
    res = b;
  }
  else {
    res = a;
  }
  return( res);
}

int main() 
{
  DBL[NFEATURES, NPOINTS] features;

  features = FibreScanFloatArray(); 

  printf("Kmeans application starts:\n");

  /* ======================================================== */

  /* Here we need to randomly choose NCLUSTERS cluster centers */
  n = 0;
  clusters = genarray([NCLUSTERS, NFEATURES], TOD(0.0));
  /* initialize the random clusters */
  initial = genarray([NPOINTS], 0);
  for (i = 0; i < NPOINTS; i++) {
    initial[i] = i;
  }
  initial_points = NPOINTS;

  /* randomly pick cluster centers */
  for (i=0; i<NCLUSTERS && initial_points >= 0; i++) {
    for (j=0; j<NFEATURES; j++) {
      clusters[i, j] = features[j,initial[n]];	
    }

    /* swap the selected index to the end (not really necessary,
       could just move the end up) */
    temp = initial[n];
    initial[n] = initial[initial_points-1];
    initial[initial_points-1] = temp;
    initial_points = initial_points-1;
    n = n + 1;
  }
  /* ======================================================== */


  for( i = 0; i < NCLUSTERS; i++) {
    for( j = 0; j < NFEATURES; j++) {
      printf("%f ", clusters[i,j]);
    }
    printf("\n");
  }

  new_centers_len = genarray([NCLUSTERS], 0); 
  new_centers = genarray([NCLUSTERS, NFEATURES], TOD(0.0));

  membership = genarray([NPOINTS], -1);

  c = 0;
  loop = -1;

  do {
    delta = TOD(0.0d);
    membership_new = with {
                   ( [0] <= iv=[k] < [NPOINTS]) {
/*
                     index = -1;
                     ans = TOD(0.0);
                     min_dist = FLT_MAX;

		     for (cl=0; cl < NCLUSTERS; cl++) {			           
                       ans = with {
                               ( [0] <= iv=[j] < [NFEATURES]) {
                                 diff = features[j,k]-clusters[cl,j];
                                 res = diff*diff;
                               }:res;
                             }:fold(+, TOD(0.0));	

			if (ans < min_dist) {
			  min_dist = ans;
			  index = cl;
			}
		      }
                      res = index;
*/
                      index_pair = with {
                                ( [0] <= iv=[cl] < [NCLUSTERS]) {
                                  ans = with {
                                    ( [0] <= iv=[j] < [NFEATURES]) {
                                      diff = features[j,k]-clusters[cl,j];
                                      res = diff*diff;
                                    }:res;
                                  }:fold(+, TOD(0.0));
                                  res = [TOD(cl),ans];	
                                }:res;
                              }:fold( minIndex, [TOD(0.0), FLT_MAX]);
                      res = toi(index_pair[0]);
                   }:res;
                 }:genarray( [NPOINTS], -1);

    for (i = 0; i < NPOINTS; i++) {		
      cluster_id = membership_new[i];
      new_centers_len[cluster_id] = new_centers_len[cluster_id]+1;
      if( membership_new[i] != membership[i]) {
        delta += TOD(1.0d);
        membership[i] = membership_new[i];
      }

      for (j = 0; j < NFEATURES; j++) {			
        new_centers[cluster_id, j] = new_centers[cluster_id, j] + features[j, i];
      }
    } 

    for (i=0; i < NCLUSTERS; i++) {
      for (j=0; j < NFEATURES; j++) {
        if( new_centers_len[i] > 0) {
	  clusters[i, j] = new_centers[i, j] / TOD( new_centers_len[i]);  /* take average i.e. sum/n */
        }
	new_centers[i, j] = TOD(0.0);  /* set back to 0 */
      }
      new_centers_len[i] = 0;  /* set back to 0 */
    }	 
    c = c + 1;  /* Count the number of actual loops */
    loop = loop + 1; 
  } while ( ( delta > THRESHOLD) && ( loop < MAX_ITER));

  printf("iterated %d times\n", c);

  print(clusters);
/*
  for(i = 0; i < NCLUSTERS; i++){
    printf("%d:", i);
    for(j = 0; j < NFEATURES; j++){
      printf(" %f", clusters[i][j]);
    }
    printf("\n\n");
  }
*/
  return(0);
}

