use StdIO: all;
use Array: all;
use CommandLine: all;
use Benchmarking: all; 

#define FLOAT

#ifdef FLOAT 
#define DBL float
#define TOD tof
#else 
#define DBL double
#define TOD tod
#endif

#ifndef SIZE
#define SIZE 1024
#endif

DBL[.,.] compute(DBL[.,.] mat)
{
#ifdef C_IMP /* C implementation */

  for( i = 0; i < SIZE; i++) {
    for (j = i; j < SIZE; j++) {
      summ = mat[i, j];
      for (k = 0; k < i; k++) { 
        summ -= mat[i,k]*mat[k,j];
      }  
      mat[i,j] = summ;
    }

    for (j = i+1; j < SIZE; j++) {
      summ = mat[j, i];
      for (k = 0; k < i; k++) {
        summ -= mat[j, k]*mat[k, i];
      }
      mat[j, i] = summ/mat[i, i];
    }
  }

#elif SAC1 /* SAC implementation 1 */

  for( i = 0; i < SIZE; i++) {
    mat = with {
            ([i,i] <= iv=[m,j] < [i+1,SIZE]) {
              res = with {
                      ([0] <= iv=[k] < [i]) {
                        s = mat[i,k]*mat[k,j];
                      }:s;
                    }:fold(-, mat[i,j]);
            }:res;
          }:modarray(mat);

    mat = with {
            ([i+1,i] <= iv=[j,n] < [SIZE,i+1]) {
              res = with {
                      ([0] <= iv=[k] < [i]) {
                        s = mat[j,k]*mat[k,i];
                      }:s;
                    }:fold(-, mat[j,i]);
              res = res/mat[i,i];
            }:res;
          }:modarray(mat);
  }
#else /* SAC implementation 2 */

  for( i = 0; i < SIZE-1; i++) {

    /* Compute column */
    mat = with {
            ([i+1,i] <= iv=[j,n] < [SIZE,i+1]) {
              res = mat[iv]/mat[i,i];
            }:res;
          }:modarray(mat);

    mat = with {
            ([i+1,i+1] <= iv=[m,j] < [SIZE,SIZE]) {
              res = mat[iv] - mat[m,i]*mat[i,j];  
            }:res;
          }:modarray(mat);
  }

#endif
  return( mat);
}

int main()
{
  DBL[SIZE,SIZE] mat;

#ifdef FLOAT 
  mat = FibreScanFloatArray( );
#else 
  mat = FibreScanDoubleArray( );
#endif

  interval0 = getInterval( "LUD", 0, 3);
  start( interval0 );
  mat = compute(mat);
  end( interval0 );

  time, unit = returnResultUnit(interval0);
  printf(" %.3f %s", time, unit);

#ifdef OUTPUT
  FibrePrint(mat);
  //print(mat);
  return( 0);
#else
  return( toi(sum(mat)));
#endif
}

