use StdIO: all;
use Array: all;
use Rand: all except{srandom};
use Random: {srandom};
use Benchmarking: all;


#ifndef SIZE
//#define SIZE 512000
#define SIZE 2048000
#endif

#ifndef ITER 
//#define ITER 100 
#define ITER 500 
#endif

#define MIN(a, b) ((a)<=(b) ? (a) : (b))
//#define CONDI

int id( int x)
{
  return( x);
}

int main()
{
  // This is pretty much as crazy as I can get on the K20,
  // though I don't think it is a memeory limit but instead
  // a block/register limit - potential to optimise?
  rows = ITER;
  cols = SIZE;

  srandom(toui(7));  

  wall = genarray([rows,cols], 0); 
  result = genarray([cols], 0); 

  wall = with {
           ([0,0] <= iv < [rows, cols]) : id( rand()%10);
         }:genarray([rows,cols], 0);
  
  result = wall[0];

  interval0 = getInterval( "PF", 0, 3);
  start( interval0 ); 

  benchThis();
  for (t = 0; t < rows-1; t++) {
    result = with {
#ifndef CONDI
	  ([0] <= iv=[n] < [cols]) {
        m = result[n];
        if (n > 0) {
		  m = MIN(m, result[n-1]);
	    }
	    if (n < cols-1) {
		  m = MIN(m, result[n+1]);
	    }
	    res = wall[t+1, n] + m;
	  } : res;
#else
      ([0] <= iv=[n] < [1]) {
        m = result[n];
		m = MIN(m, result[n+1]);
        res = wall[t+1, n] + m;
      } : res;
      ([0] < iv=[n] < [cols-1]) {
        m = result[n];
        m = MIN(m, result[n-1]);
        m = MIN(m, result[n+1]);
        res = wall[t+1, n] + m;
      } : res;
      ([cols-1] <= iv=[n] < [cols]) {
        m = result[n];
		m = MIN(m, result[n-1]);
        res = wall[t+1, n] + m;
      } : res;
#endif
	} : modarray(result); 
  } 

  end( interval0 ); 

#ifdef OUTPUT 
  print( result);
#else
  //printResult( interval0);
  //printf("%d\n", result[0]);
  time, unit = returnResultUnit(interval0);
  printf(" %d %d %.4f %s\n", ITER, SIZE, time, unit);
#endif

  return( sum(result));
}

