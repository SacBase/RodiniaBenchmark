use StdIO: all;
use Array: all;
use Rand: all except{srandom};
use Random: {srandom};
use Benchmarking: all;


#ifndef SIZE
#define SIZE 131072 
#endif

#ifndef ITER 
#define ITER 200 
#endif

#define MIN(a, b) ((a)<=(b) ? (a) : (b))

int id( int x)
{
  return( x);
}

int main()
{
  rows = ITER;
  cols = SIZE;

  srandom(7);  

  wall = genarray([rows,cols], 0); 
  result = genarray([cols], 0); 

/*
  for (i = 0; i < rows; i++) {
    for (j = 0; j < cols; j++) {
      wall[i,j] = rand() % 10;
    }
  }

  for (j = 0; j < cols; j++) {
    result[j] = wall[0,j];
  }

*/

  wall = with {
           ([0,0] <= iv < [rows, cols]) : id( rand()%10);
         }:genarray([rows,cols], 0);
  
  result = with {
             ([0] <= iv < [cols]) : id( wall[0,iv[0]]);
           }:genarray([cols], 0);


  interval0 = getInterval( "PF", 0 );
  start( interval0 ); 

  for (t = 0; t < rows-1; t++) {
    result = with {
	    ([0] <= iv=[n] < [cols]) {
	      m = result[n];
	      if (n > 0) {
		m = MIN(m, result[n-1]);
	      }
	      if (n < cols-1) {
		m = MIN(m, result[n+1]);
	      }
	      res = wall[t+1, n] + m;

	    }:res;
	  }:modarray(result); 
  }

  end( interval0 ); 

#ifdef OUTPUT 
  for (i = 0; i < cols; i++) {
    printf("%d ",result[i]);
  }
  printf("\n");
#else
/*
  printf("%d\n", result[0]);
*/
#endif

  return( result[0]);
}

