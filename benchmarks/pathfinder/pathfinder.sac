use StdIO: all;
use Array: all;
use Rand: all;
use Benchmarking: all;


#ifndef SIZE
//#define SIZE 512000
#define SIZE 2048000
#endif

#ifndef ITER
//#define ITER 100
#define ITER 500
#endif

//#define CONDI

int[.] compute(int[.,.] wall, int[] rows, int[] cols)
{
  benchThis();

  result = wall[0];

  for (t = 0; t < rows-1; t++) {
    result = with {
#ifndef CONDI
      ([0] <= iv=[n] < [cols]) {
        m = result[n];
        if (n > 0) {
          m = min(m, result[n-1]);
        }
        if (n < cols-1) {
          m = min(m, result[n+1]);
        }
        res = wall[t+1, n] + m;
      } : res;
#else
      ([0] <= iv=[n] < [1]) {
        m = result[n];
        m = min(m, result[n+1]);
        res = wall[t+1, n] + m;
      } : res;
      ([0] < iv=[n] < [cols-1]) {
        m = result[n];
        m = min(m, result[n-1]);
        m = min(m, result[n+1]);
        res = wall[t+1, n] + m;
      } : res;
      ([cols-1] <= iv=[n] < [cols]) {
        m = result[n];
        m = min(m, result[n-1]);
        res = wall[t+1, n] + m;
      } : res;
#endif
    } : modarray(result);
  }

  return( result);
}

int id( int x)
{
  return( x);
}

int main()
{
  // This is pretty much as crazy as I can get on the K20,
  // though I don't think it is a memeory limit but instead
  // a block/register limit - potential to optimise?
  rows = ITER;
  cols = SIZE;

  srandom(toui(7));

  //wall = genarray([rows,cols], 0);
  //result = genarray([cols], 0);

  wall = with {
    ([0,0] <= iv < [rows, cols]) : id( rand()%10);
  }:genarray([rows,cols], 0);

  interval0 = getInterval( "PF", 0, 1);
  start( interval0 );

  result = compute( wall, rows, cols);

  end( interval0 );

#ifdef OUTPUT
  print( result);
#else
  time, unit = returnResultUnit(interval0);
  printf(" %.3f %s", time, unit);
#endif

  return( result[0]);
}

